{"version":3,"sources":["components/Card.js","components/CardList.js","components/Search.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","href","className","src","alt","CardList","robots","map","user","Search","event","type","placeholder","onChange","Scroll","props","style","overflowY","height","border","children","App","onNameSearchChange","setState","searchFiled","target","value","onEmailSearchChange","emailSearchFiled","state","fetch","then","respond","json","users","fillterRobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MACf,OACG,uBAAGC,KAAK,KAGX,yBAAKC,UAAU,6CACX,yBAAMC,IAAG,+BAA0BL,GAAMM,IAAG,uBAAkBN,KAC9D,4BAAKC,GACL,2BAAIC,MCKDK,EAZE,SAAC,GAOd,OAP6B,EAAbC,OACIC,KAAI,SAACC,GACrB,OAAO,kBAAC,EAAD,CAAMV,GAAOU,EAAKV,GACzBC,KAASS,EAAKT,KACdC,MAAUQ,EAAKR,YCGRS,EARA,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMX,EAAS,EAATA,KACnB,OACiB,2BAAOY,KAAK,OAAOC,YAAab,EAAMG,UAAU,aAAaW,SAAUH,KCK7EI,EAPD,SAACC,GACX,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,QAAQC,OAAO,oBACjDJ,EAAMK,WCkDJC,G,8DAhDX,aAAc,IAAD,8BACT,gBAOJC,mBAAmB,SAACZ,GACjB,EAAKa,SAAS,CAACC,YAAYd,EAAMe,OAAOC,SAT9B,EAWbC,oBAAoB,SAACjB,GACjB,EAAKa,SAAS,CAACK,iBAAiBlB,EAAMe,OAAOC,SAV7C,EAAKG,MAAM,CACPvB,OAAO,GACPkB,YAAY,GACZI,iBAAiB,IALZ,E,gEAcO,IAAD,OACfE,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAEA,EAAQC,UACtBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACjB,OAAO4B,S,+BAG9B,IAAD,OACEC,EAAcC,KAAKP,MAAMvB,OAAO+B,QAAO,SAACC,GAC1C,OAAQA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKX,MAAML,YAAYe,gBAAgBD,EAAMtC,MAAMuC,cAAcC,SAAS,EAAKX,MAAMD,iBAAiBW,kBAEpJ,OAA8B,IAA3BH,KAAKP,MAAMvB,OAAOmC,OACV,wBAAIvC,UAAU,UAAd,WAIC,kBAAC,WAAD,KACQ,yBAAKA,UAAU,WACX,4CAGA,6BACI,kBAAC,EAAD,CAAQQ,MAAO0B,KAAKd,mBAAoBvB,KAAK,eAC7C,kBAAC,EAAD,CAAQW,MAAO0B,KAAKT,oBAAqB5B,KAAK,iBAElD,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAWO,OAAQ6B,W,GAxCjCO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MACZC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2aae8b8f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id,name,email})=> {\r\n        return(\r\n           <a href=\"#\">\r\n\r\n           \r\n        <div className=\"bg-light-green dib br3 ma2 grow  shadow-5\">\r\n            <img  src={`https://robohash.org/${id}`} alt={`Photo number ${id}`}/>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>   \r\n        </a> \r\n        )};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    const List = robots.map((user) => {\r\n        return <Card id = { user.id }\r\n        name = { user.name }\r\n        email = { user.email }\r\n        />\r\n    })\r\n    return (\r\n        List\r\n    )\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Search = ({event,name})=> {\r\n    return(\r\n                     <input type=\"text\" placeholder={name} className=\"ma2 pa2 tc\" onChange={event}></input>\r\n        );\r\n       }\r\n           \r\n     \r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll',height:'800px',border:'1px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;","import React,{Component, Fragment} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Search from '../components/Search'\r\nimport Scroll from  '../components/Scroll';\r\nimport tachyons from \"tachyons\";\r\nimport \"./App.css\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchFiled:'',\r\n            emailSearchFiled:''\r\n        }\r\n    }\r\n    onNameSearchChange=(event)=>{\r\n       this.setState({searchFiled:event.target.value});\r\n    }\r\n    onEmailSearchChange=(event)=>{\r\n        this.setState({emailSearchFiled:event.target.value});\r\n     }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(respond=>respond.json())\r\n        .then(users=>this.setState({robots:users}))\r\n    }\r\n\r\n    render(){\r\n        const fillterRobots=this.state.robots.filter((robot)=>{\r\n            return (robot.name.toLowerCase().includes(this.state.searchFiled.toLowerCase())&&robot.email.toLowerCase().includes(this.state.emailSearchFiled.toLowerCase()));\r\n        });\r\n        if(this.state.robots.length===0){\r\n            return <h1 className=\"tc pa2\">Loading</h1>\r\n        }\r\n        else{\r\n                return(\r\n                    <Fragment >\r\n                            <div className='tc pa2 '>\r\n                                <h1>\r\n                                    Robo Friends\r\n                                </h1>\r\n                                <div>\r\n                                    <Search event={this.onNameSearchChange} name=\"Robot Name\"/>\r\n                                    <Search event={this.onEmailSearchChange} name=\"Robot Email\"/>\r\n                                </div>\r\n                                <Scroll>\r\n                                <CardList  robots={fillterRobots}/>\r\n                                </Scroll>\r\n                               \r\n                            </div>\r\n                    </Fragment>\r\n            );\r\n                }\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}